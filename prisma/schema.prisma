generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model user {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  avatarUrl        String?
  email            String   @unique
  role             UserRole @default(PLAYER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  username         String?
  activeCampaignId String?  @db.ObjectId
  darkMode         Boolean  @default(false)

  // Relations
  activeCampaign  campaign?        @relation("UserActiveCampaign", fields: [activeCampaignId], references: [id])
  campaignMembers CampaignMember[]
  updates         Update[]
  rules           Rule[]
  notes           Note[]
  creatures       Creature[]
}

model campaign {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  activeUsers user[]           @relation("UserActiveCampaign")
  members     CampaignMember[]
  updates     Update[]
  rules       Rule[]
  notes       Note[]
  quests      Quest[]
  creatures   Creature[]
}

model CampaignMember {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  campaignId    String       @db.ObjectId
  role          CampaignRole @default(PLAYER) // Role within this specific campaign
  characterName String? // Character name for this campaign
  joinedAt      DateTime     @default(now())

  user     user     @relation(fields: [userId], references: [id])
  campaign campaign @relation(fields: [campaignId], references: [id])

  @@unique([userId, campaignId]) // Prevent duplicate memberships
}

// ---------- Content Models for the Tabs ----------

model Update {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  createdAt  DateTime @default(now())
  authorId   String   @db.ObjectId
  campaignId String   @db.ObjectId

  author   user     @relation(fields: [authorId], references: [id])
  campaign campaign @relation(fields: [campaignId], references: [id])
}

model Rule {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String // Markdown content
  category   String? // For organizing rules into sections
  order      Int      @default(0) // For manual ordering within categories
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String   @db.ObjectId
  campaignId String   @db.ObjectId

  author   user     @relation(fields: [authorId], references: [id])
  campaign campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId, category, order])
}

model Note {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String? // Optional title for the note
  content    String
  tags       String[] // Array of tags for organization
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String   @db.ObjectId
  campaignId String   @db.ObjectId

  author   user     @relation(fields: [authorId], references: [id])
  campaign campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId, authorId, createdAt])
}

model Quest {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      QuestStatus @default(AVAILABLE)
  reward      String?
  difficulty  String?
  createdAt   DateTime    @default(now())
  campaignId  String      @db.ObjectId

  campaign campaign @relation(fields: [campaignId], references: [id])
}

model Creature {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  category    String   @default("NPC") // NPC, Monster, Human, etc.
  tags        String[] // Array of tags for flexible categorization
  avatarUrl   String? // Optional image URL

  // D&D Stats
  armorClass Int?
  hitPoints  Int?
  speed      String? // e.g., "30 ft., fly 60 ft."

  // Ability Scores
  strength     Int?
  dexterity    Int?
  constitution Int?
  intelligence Int?
  wisdom       Int?
  charisma     Int?

  // Combat & Skills
  challengeRating     String? // e.g., "1/4", "5", "15"
  proficiencyBonus    Int?
  skills              String? // JSON string for complex skill data
  savingThrows        String? // JSON string for saving throw bonuses
  damageResistances   String?
  damageImmunities    String?
  conditionImmunities String?
  senses              String? // e.g., "darkvision 60 ft., passive Perception 12"
  languages           String? // e.g., "Common, Draconic"

  // D&D Features (stored as JSON for flexibility)
  traits           String? // JSON array of traits
  actions          String? // JSON array of actions
  legendaryActions String? // JSON array of legendary actions
  lairActions      String? // JSON array of lair actions
  spellcasting     String? // JSON object for spellcasting info

  // Metadata
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  creatorId  String   @db.ObjectId
  campaignId String   @db.ObjectId

  creator  user     @relation(fields: [creatorId], references: [id])
  campaign campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId, category])
  @@index([campaignId, name])
}

enum QuestStatus {
  AVAILABLE
  IN_PROGRESS
  UNAVAILABLE
  COMPLETED
}

enum UserRole {
  PLAYER
  DM
  ADMIN
}

enum CampaignRole {
  PLAYER
  DM
}
